Christina Oliveira
TA:Dhavalikar
Section 5
UID: 204803448
Assignment 1: Homework Keystrokes

Ex 1.1 Moving Around in Emacs
2. C-s H M-f
3. C-s s c M-f
4. C-s s e l f M-f
5. C-s a r r o w Enter
6. C-e
7. C-a
8. I believe I have optimized the keystrokes 
9. No, I did not
10. C-x C-c

Ex 1.2 Deleting in Emacs
2. M-g M-g 1 8 Enter C-k
3. C-s D E C-a C-k
4. C-s < ! C-a C-k C-k C-k C-k C-k
5. C-s < ! C-b M-z >
C-n C-a C-Sp DOWN DOWN DOWN DOWN Backspace
C-s < ! C-a C-k
C-x C-s 
C-x C-c

Ex 1.3 Inserting Text in Emacs
2. C-s 1 C-s C-b 2 C-s 1 C-s C-s C-b 2
3. Esc < C-s U T F - 8 M-% U S - A S C I I Enter y n
4. Esc < C-M-s [ ^ [ : a s c i i : ] ] C-a C-k
5. Esc < C-s < o C-e Enter
6. C-x C-s 
C-x C-c

Ex 1.4 Other Editing Tasks in Emacs
3. C-s - < ! C-a C-f C-Sp C-e M-w M-g M-g 1 8 Enter C-y
4. C-s - < ! - - Sp D C-a C-f C-Sp C-e M-w M-g M-g 1 2 5 Enter C-y
C-s - < ! - - Sp Y C-a C-f C-Sp C-e DOWN DOWN M-w M-g M-g 3 3 9 Enter C-y
C-s  g < ! C-b C-b C-Sp C-s > Enter M-w M-g M-g 3 8 4 Enter C-s g Enter C-y
C-s < ! - - C-q C-j UP C-Sp DOWN DOWN DOWN DOWN M-w M-g M-g 3 8 5 Enter C-y
C-s < ! - - e C-a C-Sp C-e M-w M-g M-g 4 0 4 Enter C-y
5. C-sp Esc > Backspace
6. C-_
7. Esc < C-s + + C-a < ! - - Esc > - - >
8. Esc < M-% < o l > Enter < o L > Enter y y y y y y y

Ex. 1.5 Doing commands in Emacs
1. M-x m k d i r Enter j u n k Enter
2. C-x C-f j u n k / h e l l o . c (source code from site) C-s
3. M-x c o m p i l e Enter M-Backspace M-Backspace g c c sp h e l l o . c Enter
4.C-x b h e l l o - o u t
#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}
5.C-Space M-> M-w C-x C-f Bkspace Bkspace Bkspace
Bkspace k e y 1 . t x t Enter M-> C-y
C-x C-s
C-x C-c

Ex. 1.6 Running Elisp Code
1. C-x 2 C-x o C-x b Enter
2. ( r a n d o m  sp " 2 0 4 - 8 0 3 - 4 4 8 " )
C-j
result: -2095742294640783884
3. ( s e t q sp x sp ( r a n d o m ) )
C-j
( s e t q sp y sp ( r a n d o m ) )
C-j
4. ( * sp x sp y ) 
C-j
The result is mathematically incorrect as the result (533616200755733636) is only one digit larger than x and y are, it should be much larger. 
5.The output number is that same, but it gives me the additional output: (#o35476221557434062204, #x767c91b7c706484)
6.The integers are non random, but rather pseudorandom. For something to be random in a mathematical way, there needs to be an infinite number of possibilities (here, we are limited by the max integer that can be represented). Also, since we seed the generator, it is not truly random.

7. 0%. If (random) is truly random then it will calculate some number from -∞ to ∞. The probability of overflow (and therefore the incorrect result) would then be n/2∞ where n is the largest number that can be multiplied and not overflow IntMax.Any number over infinity is 0, therefore the probability is 0%.







 
